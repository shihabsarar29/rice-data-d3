{"ast":null,"code":"var _jsxFileName = \"/Users/shihab/StudioProjects/rice-d3/rice-d3/src/components/MultilineChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MultilineChart = _ref => {\n  _s();\n\n  let {\n    data,\n    dimensions\n  } = _ref;\n  const svgRef = useRef(null);\n  const {\n    width,\n    height,\n    margin\n  } = dimensions;\n  const svgWidth = width + margin.left + margin.right;\n  const svgHeight = height + margin.top + margin.bottom;\n  useEffect(() => {\n    const xScale = d3.scaleTime().domain(d3.extent(data[0].items, d => d.date)).range([0, width]);\n    const yScale = d3.scaleLinear().domain([d3.min(data[0].items, d => d.value) - 50, d3.max(data[0].items, d => d.value) + 50]).range([height, 0]); // Create root container where we will append all other chart elements\n\n    const svgEl = d3.select(svgRef.current);\n    svgEl.selectAll(\"*\").remove(); // Clear svg content before adding new elements \n\n    const svg = svgEl.append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`); // Add X grid lines with labels\n\n    const xAxis = d3.axisBottom(xScale).ticks(5).tickSize(-height + margin.bottom);\n    const xAxisGroup = svg.append(\"g\").attr(\"transform\", `translate(0, ${height - margin.bottom})`).call(xAxis);\n    xAxisGroup.select(\".domain\").remove();\n    xAxisGroup.selectAll(\"line\").attr(\"stroke\", \"rgba(255, 255, 255, 0.2)\");\n    xAxisGroup.selectAll(\"text\").attr(\"opacity\", 0.5).attr(\"color\", \"white\").attr(\"font-size\", \"0.75rem\"); // Add Y grid lines with labels\n\n    const yAxis = d3.axisLeft(yScale).ticks(5).tickSize(-width).tickFormat(val => `${val}%`);\n    const yAxisGroup = svg.append(\"g\").call(yAxis);\n    yAxisGroup.select(\".domain\").remove();\n    yAxisGroup.selectAll(\"line\").attr(\"stroke\", \"rgba(255, 255, 255, 0.2)\");\n    yAxisGroup.selectAll(\"text\").attr(\"opacity\", 0.5).attr(\"color\", \"white\").attr(\"font-size\", \"0.75rem\"); // Draw the lines\n\n    const line = d3.line().x(d => xScale(d.date)).y(d => yScale(d.value));\n    svg.selectAll(\".line\").data(data).enter().append(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", d => d.color).attr(\"stroke-width\", 3).attr(\"d\", d => line(d.items));\n  }, [data, height, margin.bottom, margin.left, margin.top, width]); // Redraw chart if data changes\n\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: svgRef,\n    width: svgWidth,\n    height: svgHeight\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 10\n  }, this);\n};\n\n_s(MultilineChart, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n\n_c = MultilineChart;\nexport default MultilineChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultilineChart\");","map":{"version":3,"sources":["/Users/shihab/StudioProjects/rice-d3/rice-d3/src/components/MultilineChart.js"],"names":["React","useEffect","useRef","d3","MultilineChart","data","dimensions","svgRef","width","height","margin","svgWidth","left","right","svgHeight","top","bottom","xScale","scaleTime","domain","extent","items","d","date","range","yScale","scaleLinear","min","value","max","svgEl","select","current","selectAll","remove","svg","append","attr","xAxis","axisBottom","ticks","tickSize","xAxisGroup","call","yAxis","axisLeft","tickFormat","val","yAxisGroup","line","x","y","enter","color"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef} from \"react\";\nimport * as d3 from \"d3\";\n \nconst MultilineChart = ({ data, dimensions }) => {\n  const svgRef = useRef(null);\n  const { width, height, margin } = dimensions;\n  const svgWidth = width + margin.left + margin.right;\n  const svgHeight = height + margin.top + margin.bottom;\n \n  useEffect(() => {\n    const xScale = d3.scaleTime()\n      .domain(d3.extent(data[0].items, (d) => d.date))\n      .range([0, width]);\n    const yScale = d3.scaleLinear()\n      .domain([\n        d3.min(data[0].items, (d) => d.value) - 50,\n        d3.max(data[0].items, (d) => d.value) + 50\n      ])\n      .range([height, 0]);\n    // Create root container where we will append all other chart elements\n    const svgEl = d3.select(svgRef.current);\n    svgEl.selectAll(\"*\").remove(); // Clear svg content before adding new elements \n    const svg = svgEl\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n   // Add X grid lines with labels\n   const xAxis = d3.axisBottom(xScale)\n     .ticks(5)\n     .tickSize(-height + margin.bottom);\n   const xAxisGroup = svg.append(\"g\")\n     .attr(\"transform\", `translate(0, ${height - margin.bottom})`)\n     .call(xAxis);\n   xAxisGroup.select(\".domain\").remove();\n   xAxisGroup.selectAll(\"line\").attr(\"stroke\", \"rgba(255, 255, 255, 0.2)\");\n   xAxisGroup.selectAll(\"text\")\n     .attr(\"opacity\", 0.5)\n     .attr(\"color\", \"white\")\n     .attr(\"font-size\", \"0.75rem\");\n   // Add Y grid lines with labels\n   const yAxis = d3.axisLeft(yScale)\n     .ticks(5)\n     .tickSize(-width)\n     .tickFormat((val) => `${val}%`);\n   const yAxisGroup = svg.append(\"g\").call(yAxis);\n   yAxisGroup.select(\".domain\").remove();\n   yAxisGroup.selectAll(\"line\").attr(\"stroke\", \"rgba(255, 255, 255, 0.2)\");\n   yAxisGroup.selectAll(\"text\")\n     .attr(\"opacity\", 0.5)\n     .attr(\"color\", \"white\")\n     .attr(\"font-size\", \"0.75rem\");\n    // Draw the lines\n    const line = d3.line()\n      .x((d) => xScale(d.date))\n      .y((d) => yScale(d.value));\n    svg.selectAll(\".line\")\n      .data(data)\n      .enter()\n      .append(\"path\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", (d) => d.color)\n      .attr(\"stroke-width\", 3)\n      .attr(\"d\", (d) => line(d.items));\n  }, [data, height, margin.bottom, margin.left, margin.top, width ]); // Redraw chart if data changes\n \n  return <svg ref={svgRef} width={svgWidth} height={svgHeight} />;\n};\n \nexport default MultilineChart;\n"]},"metadata":{},"sourceType":"module"}